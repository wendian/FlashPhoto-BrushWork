################################################################################
# Name            : Makefile
# Project         : FlashPhoto Suite
# Description     : Application Makefile Template
# Creation Date   : Fri May 16 14:59:49 2014
# Original Author : jharwell
#
# Note: This file is -j (parallel build) safe, provided you don't mess with it
# too much.
#
#  Products:
#  Make Target     Product                  Description
#  ===========     =======                  ===================
#  all             build/bin/<dirname>      The main application
#  clean           N/A                      Removes application, all .o
#  veryclean       N/A                      Everything clean removes, +
#                                           the external libraries
#  documentation   Various                  Generates documentation for
#                                           project from the doxygen
#                                           comments/markup in the code
################################################################################

###############################################################################
# Directory Definitions
###############################################################################
# src/      - Root of the source tree for the project
# build/    - Root directory for project build process
# doc/      - Directory where all documentation lives
# config/   - Directory for all autoconf/configure/automake inputs/output
BUILDDIR        = $(BUILDROOT)/$(notdir $(shell pwd))
SRCDIR          = ./src
OBJDIR          = $(BUILDDIR)/obj
BINDIR          = $(BUILDDIR)/bin
DOCDIR          = ./doc

###############################################################################
# Functions
###############################################################################
# Recursive wildcard: search a list of directories for all files that match a pattern
# usage: $(call rwildcard, $(DIRS1) $(DIRS2) ..., pattern)
#
# All directory lists passed as first arg must be separated by spaces, and they
# themselves must be space separated as well. There must NOT be a space between
# the last dir list the , and the start of the pattern.
#
# You should never need to modify this.
# usage: $(call rwildcard, $(DIRS1) $(DIRS2) ..., pattern)
rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2)  $(filter $(subst *,%,$2),$d))

# make-depend: generate dependencies for C++ source files dynamically. Very useful
# for including .h files as target dependencies.
# usage: $(call make-depend,source-file,object-file,depend-file)
#
# You should never need to modify this.
# usage: $(call make-depend,source-file,object-file,depend-file)
make-depend-cxx=$(CXX) -MM -MF $3 -MP -MT $2 $(CXXFLAGS) $1

###############################################################################
# Target Definitions
###############################################################################
# Define what directories to search for source code. For us, this will just
# be a single source directory, src/.
SOURCES = $(SRCDIR)

# Define the list of files to compile for this project, which is built by
# recursively finding all .cc files in src/.
SRC_CXX = $(call rwildcard,$(SOURCES),*.cc)

# For each of the .cc files found under src/, determine the name of the
# corresponding .o file to create in obj/ via pattern substitution (patsust).
OBJECTS_CXX = $(notdir $(patsubst %.cc,%.o,$(SRC_CXX)))

# The target library (what you are building)
TARGET = $(BINDIR)/$(notdir $(shell pwd))

###############################################################################
# All targets
###############################################################################

# Phony targets: targets of this type will be run everytime by make (i.e. make
# does not assume that the target recipe will build the target name)
.PHONY: clean veryclean all documentation

# The default target which will be run if the user just types "make" without a
# target name
all: $(TARGET)

# Unless invoked with make clean, include generated dependencies. This makes
# it so that anytime you make an edit in a .h file, make will know that all
# .cc files that include are out of date and will need to be recompiled.
#
# $(MAKECMDGOALS) is a special make variable that contains a space separated
# list of variables that make was told to build.
ifneq "$MAKECMDGOALS" "clean"
-include $(addprefix $(OBJDIR)/,$(OBJECTS_CXX:.o=.d))
endif

# The Objectifier. This rule says that each .o file in obj/, depends on the
# presence of the obj/ directory. This is necessary so that parallel make
# (make -j) works. Also, some .o files depend on .cc files that in turn depend
# on header files generated by building external libraries, so add them as
# dependencies as well.
$(addprefix $(OBJDIR)/, $(OBJECTS_CXX)): | $(OBJDIR)

# The Target Library.
$(TARGET): $(addprefix $(OBJDIR)/, $(OBJECTS_CXX)) | $(BINDIR)
	$(CXX) $(CXXFLAGS) $(CXXLIBDIRS) $(addprefix $(OBJDIR)/, $(OBJECTS_CXX)) -o $@ $(CXXLIBS)

install: $(TARGET)
	@cd $(BUILDROOT)/bin && ln -s ../$(notdir $(shell pwd))/bin/$(notdir $(shell pwd))

# Bootstrap Bill. This creates all of the order-only prerequisites; that is,
# files/directories that have to be present in order for a given target build
# to succeed, but that make knows do not need to be remade each time their
# modification time is updated and they are newer than the target being built.
$(BINDIR) $(OBJDIR):
	@mkdir -p $@

# The Cleaner. Clean up the project, by removing ALL files generated during
# the build process to build the main target.
clean:
	@rm -rf $(BUILDDIR)

# The Super Cleaner. Clean the project, but also clean all external libraries.
veryclean: clean
	@rm -rf $(BUILDDIR)

# The Documenter. Generate documentation for the project.
documentation:
	cd $(DOCDIR) && doxygen Doxyfile
	cd ..

###############################################################################
# Pattern Rules
###############################################################################
# For compiling the C++ source. Specify that any .o file in obj/ can be built
# from any .cc file in src/. Before doing compilation, emit (possibly) make
# rules for the includes for the .cc file, as they may have changed since the
# last invocation of make.
$(OBJDIR)/%.o: $(SRCDIR)/%.cc
	@$(call make-depend-cxx,$<,$@,$(subst .o,.d,$@))
	$(CXX) $(CXXFLAGS) $(CXXLIBDIRS) -c -o  $@ $<
